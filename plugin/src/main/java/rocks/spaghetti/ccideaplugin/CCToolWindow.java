package rocks.spaghetti.ccideaplugin;

import com.intellij.icons.AllIcons;
import com.intellij.openapi.actionSystem.*;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.vfs.VirtualFileManager;
import com.intellij.openapi.vfs.VirtualFileSystem;
import com.intellij.ui.treeStructure.Tree;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.Arrays;

import static rocks.spaghetti.ccideaplugin.CCIdeaPlugin.LOGGER;

public class CCToolWindow {
    private final Project project;
    private JPanel content;
    private ActionToolbar toolbar;
    private JComponent toolbarComponent;
    private Tree tree;

    private boolean connected = false;
    private DefaultMutableTreeNode rootNode;

    public CCToolWindow(@NotNull Project project) {
        $$$setupUI$$$();

        this.project = project;
        toolbar.setTargetComponent(content);

        rootNode = (DefaultMutableTreeNode) tree.getModel().getRoot();
        tree.setRootVisible(false);
        tree.setShowsRootHandles(true);
        tree.expandPath(new TreePath(new Object[]{rootNode}));

        DefaultMutableTreeNode node = new DefaultMutableTreeNode("Computer ID 0");
        rootNode.add(node);
        node.add(new DefaultMutableTreeNode("pipis"));
        node.add(new DefaultMutableTreeNode("pipis"));
        node.add(new DefaultMutableTreeNode("pipis"));
        node.add(new DefaultMutableTreeNode("pipis"));

        tree.expandPath(new TreePath(rootNode.getPath()));

        tree.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tree.getRowForLocation(e.getX(), e.getY());
                TreePath path = tree.getPathForLocation(e.getX(), e.getY());
                if (row != -1 && e.getClickCount() == 2) {
                    LOGGER.warn(path);
                    ApplicationManager.getApplication().runReadAction(() -> {
                        String url = VirtualFileManager.constructUrl("computercraft", "/test");
                        VirtualFile file = VirtualFileManager.getInstance()
                                .findFileByUrl(url);
                        LOGGER.warn(file.getPresentableUrl());
                        try {
                            LOGGER.warn(Arrays.toString(file.contentsToByteArray()));
                        } catch (IOException ioException) {
                            ioException.printStackTrace();
                        }
                    });
                }
            }
        });
    }

    public JPanel getContent() {
        return content;
    }

    public DefaultTreeModel getTreeModel() {
        return (DefaultTreeModel) tree.getModel();
    }

    public DefaultMutableTreeNode getRootNode() {
        return rootNode;
    }

    public DefaultMutableTreeNode getComputerNode(int id) {
        return null;
    }

    private ActionToolbar createToolbar() {
        return ActionManager.getInstance().createActionToolbar("CCToolWindowToolbar",
                new DefaultActionGroup(
                        new AnAction("Connect", "Connect/Disconnect from Game", AllIcons.Nodes.Pluginobsolete) {
                            @Override
                            public void actionPerformed(@NotNull AnActionEvent e) {
                                connected = CCIdeaPlugin.getInstance().connect();
                            }

                            @Override
                            public void update(@NotNull AnActionEvent e) {
                                e.getPresentation().setText(connected ? "Disconnect" : "Connect");
                                e.getPresentation().setIcon(connected ? AllIcons.Nodes.Plugin : AllIcons.Nodes.Pluginobsolete);
                            }
                        },
                        new AnAction("Refresh", null, AllIcons.Actions.Refresh) {
                            @Override
                            public void actionPerformed(@NotNull AnActionEvent e) {
                                LOGGER.warn("test");
                                CCIdeaPlugin.getInstance().test(CCToolWindow.this);
                            }
                        }
                ), true);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        content = new JPanel();
        content.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        content.add(toolbarComponent, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        tree = new Tree();
        content.add(tree, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        content.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return content;
    }

    private void createUIComponents() {
        toolbar = createToolbar();
        toolbarComponent = toolbar.getComponent();
    }
}
